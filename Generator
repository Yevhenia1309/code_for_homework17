#Домашнє завдання
#1. Реалізуйте генераторну функцію, яка повертатиме по одному члену геометричної прогресії із зазначеним множником.
 Генератор повинен зупинити свою роботу або після досягнення зазначеного елементу, або при передачі команди
 #на завершення.

def geometric_prog(a_1, d, quantity):
    count = 1
    while count <= quantity:
        yield a_1
        a_1 *= d
        count += 1

f_gen = geometric_prog(3, 2, 10)

for elem in f_gen:
    print(elem)
    if elem > 10:
        f_gen.close()

print(next(f_gen))
print(next(f_gen))
print(next(f_gen))
print(next(f_gen))

#2. Реалізуйте свій аналог генераторної функції range().

def my_range(start, stop = None, step = 1):
    while start < stop:
        yield start
        start += step

g = our_range(2, 6)
print(next(g))
print(next(g))
print(next(g))
print(next(g))
print(next(g))
print(next(g))
print(next(g))

#3. Напишіть функцію-генератор, яка повертатиме прості числа. Верхня межа діапазону повинна бути задана
#параметром цієї функції.

def get_Prime():
    num = 1
    prime = False
    while True:
        for i in range(3, num+1):
            if num % i == 0:
                prime = False
                if i == num:
                    prime = True
                break
        if prime:
            yield num
            num += 1
        else:
            num += 1

prime = get_Prime()
for _ in range(15):
    print(next(prime))

#4. Напишіть генераторний вираз для заповнення списку. Список повинен бути заповнений кубами чисел
#від 2 до вказаної вами величини.

gener = (i**3 for i in range(10) if i >= 2)
my_list = list(gener)
print(my_list)
